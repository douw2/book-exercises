2+0+1
1+1
source('C:/Moriko/20wi/Info201/lecture_exercise/lec3-R Intro/first.R')
2+0+1
1+1
1+1
num_cup_coffee <- 3
print("Hello, world!")
sqrt(25)
min(1, 2, 3)
print "Hello, world!"
make_full_name <- function(first_name, last_name) {
full_name <- paste(first_name, last_name)
full_name
}
my_name <- make_full_name("Sylvia", "Dou")
my_name
print("Hello, world!")
make_full_name <- function(first_name, last_name) {
full_name <- paste(first_name, last_name)
full_name
}
my_name <- make_full_name("Sylvia", "Dou")
my_name
print("Hello, world!")
use_English_name <- TRUE
if (use_English_name) {
my_name <- make_full_name("Sylvia", "Dou")
} else {
my_name <- make_full_name("Wenjia", "Dou")
}
my_name
use_English_name <- FALSE
my_name
if (use_English_name) {
my_name <- make_full_name("Sylvia", "Dou")
} else {
my_name <- make_full_name("Wenjia", "Dou")
}
my_name
# Create a variable `hometown` that stores the city in which you were born
homwtown <- "Hefei"
# Assign your name to the variable `my_name`
my_name <- "Sylvia Dou"
# Assign your height (in inches) to a variable `my_height`
my_height <- 64
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 200
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
total_cost
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- FALSE
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 / puppy_price
max_puppies
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- as.integer(1000 / puppy_price)
max_puppies
paste("Hello", "world")
?sum
# Create a variable `my_name` that contains your name
my_name <- "Sylvia Dou"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming!")
# Make the `now_doing` variable upper case
toupper(now_doing)
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 45
fav_2 <- 7
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sprt(201)
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2 / sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- fav_1 + fav_2
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum)
?round
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 0.1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <-round(fav_1, 0.1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 0.1)
round_2 <- round(fav_2, 0.1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
library("wbstats")
install("wbstats")
install.packages("wbstats")
library("wbstats")
tmdb_key <- "579b464db66ec23bdd0000012bebe515cb0448b165c99be1b1d8acc3"
base_url = "data.gov.in"
library("httr")
library("jsonlite")
library("dplyr")
key_param <- list(api_key = tmdb_key)
GET(paste0(base_url, "major-indicator/women-aged-15-19-years-who-were-already-mothers-or-pregnant"), query = key_param)
0
content(GET(paste0(base_url, "/resource/4d227855-b5db-4fed-9783-5071f2350e5f"), query = key_param), "text")
base_url = "https://api.data.gov.in"
key_param <- list(api_key = tmdb_key)
content(GET(paste0(base_url, "/resource/4d227855-b5db-4fed-9783-5071f2350e5f"), query = key_param), "text")
fromJSON(GET(paste0(base_url, "/resource/4d227855-b5db-4fed-9783-5071f2350e5f"), query = key_param))
fromJSON(GET(paste0(base_url, "/resource/4d227855-b5db-4fed-9783-5071f2350e5f"), query = key_param, format = "json"))
content(GET(paste0(base_url, "/resource/4d227855-b5db-4fed-9783-5071f2350e5f"), query = key_param, format = "json"), "text")
# Load the `shiny` package
library("shiny")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput(inputId = 'price', label = "Price (in dollars)", value = 0, min = 0),
numericInput(inputId = 'quantity', label = "Quantity", value = 1, min = 1),
p(strong("Cost")),
textOutput(outputId = 'cost')
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input_list, output_list) {
output_list$cost <- renderText({
total <- paste("$", input_list$price * input_list$quantity)
return(total)
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
souce("app_ui.R")
setwd("C:/Moriko/UW/20wi/Info201/lecture_exercise/book-exercises/chapter-19-exercises/exercise-4")
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("app_ui.R")
source("app_server.R")
# Load libraries so they are available
library("shiny")
library("ggplot2")
# Read data file
income_growth <- read.csv("data/income_growth_1980-2014.csv")
# Define a server function
server <- function(input, output) {
output$plot <- renderPlot({
# return the plot
ggplot(data = income_growth) +
geom_point(mapping = aes(
x = Income.Percentile, y = Average.Growth.Perc
), color = "gray") +
geom_point(mapping = aes(
x = Income.Percentile, y = Post.Tax.Growth.Perc
), color = "red") +
labs(x = "Income Percentile", y = "Income Growth (%)") +
scale_x_continuous(limits = input$percentile)
})
}
# Load libraries so they are available
library("shiny")
intro_panel <- tabPanel(
"Introduction",
titlePanel("Income Inequality"),
p("The below diagram was created by the New York Times to illustrate the increasing level of inequality in the US."),
img(),
p(a("https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html")),
p(strong("beautiful!"), em("amazing!"))
)
intro_panel <- tabPanel(
"Introduction",
titlePanel("Income Inequality"),
p("The below diagram was created by the New York Times to illustrate the increasing level of inequality in the US."),
img(src = "www/inequality.png"),
p(a("https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html")),
p(strong("beautiful!"), em("amazing!"))
)
main_content <- mainPanel(
plotOutput(outputId = "plot"),
p(a("http://gabriel-zucman.eu/usdina/"))
)
sidebar_content <- sidebarPanel(
sliderInput(inputId = "percentile", label = "Income Percentile", min = 0, max = 100, value = 0)
)
intro_panel <- tabPanel(
title = "Introduction",
titlePanel("Income Inequality"),
p("The below diagram was created by the New York Times to illustrate the increasing level of inequality in the US."),
img(src = "www/inequality.png"),
p(a("https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html")),
p(strong("beautiful!"), em("amazing!"))
)
growth_panel <- tabPanel(
title = "Growth Chart",
titlePanel("Income growth 1980-2014"),
sidebarLayout(
sidebar_content,
main_content
)
)
# Finally, define a `ui` variable, assigning it a `navbarPage()` layout.
# You will use `shinyUI()` to render this variable (in `app.R`)
# Give the layout a title of "Income Inequality".
# The layout should include the following elements:
# - Your `intro_panel`
# - Your `growth_panel`
ui <- navbarPage(
title = "Income Inequality",
intro_panel,
growth_panel
)
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("app_ui.R")
source("app_server.R")
# Create a new `shinyApp()` using the loaded `ui` and `server` variables
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
sidebar_content <- sidebarPanel(
sliderInput(inputId = "percentile", label = "Income Percentile", min = 0, max = 100, value = c(0, 100))
)
intro_panel <- tabPanel(
title = "Introduction",
titlePanel("Income Inequality"),
p("The below diagram was created by the New York Times to illustrate the increasing level of inequality in the US."),
img(src = "inequality.png", alt = "Example NYT chart"),
p(
a(href = "https://www.nytimes.com/interactive/2017/08/07/opinion/leonhardt-income-inequality.html", "(source)")
),
p(
strong("beautiful!"),
em("amazing!")
)
)
runApp()
main_content <- mainPanel(
plotOutput(outputId = "plot"),
p(
a(href = "http://gabriel-zucman.eu/usdina/", "http://gabriel-zucman.eu/usdina/")
)
)
runApp()
runApp()
sidebar_content <- sidebarPanel(
sliderInput(inputId = "percentile", label = "Income Percentile",
min = 0, max = 100, value = c(0, 100))
)
sidebar_content <- sidebarPanel(
sliderInput(inputId = "percentile", label = "Income Percentile",
min = 0, max = 100, value = c(0, 100))
)
runApp()
runApp()
View(income_growth)
View(income_growth)

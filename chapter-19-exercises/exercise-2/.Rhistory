install("shiny")
install.packages("shiny")
# Load the `shiny` package
library("shiny")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
my_ui <- fluidPage(
titlePanel("Cost Calculator", windowTitle = title),
numericInput('num_input_1', label = "Price (in dollars)", 0, min = 0),
numericInput('num_input_2', label = "Quantity", 1, min = 1),
strong("Cost"),
textOutput('text_output', label = "cost")
)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
my_ui <- fluidPage(
titlePanel("Cost Calculator", windowTitle = title),
numericInput('num_input_1', label = "Price (in dollars)", 0, min = 0),
numericInput('num_input_2', label = "Quantity", 1, min = 1),
strong("Cost"),
textOutput('cost')
)
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function() {
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
titlePanel("Cost Calculator", windowTitle = title),
numericInput('num_input_1', label = "Price (in dollars)", 0, min = 0),
numericInput('num_input_2', label = "Quantity", 1, min = 1),
strong("Cost"),
textOutput('cost')
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function() {
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput(inputId = 'price', label = "Price (in dollars)", value = 0, min = 0),
numericInput(inputId = 'quantity', label = "Quantity", value = 1, min = 1),
p(strong("Cost")),
textOutput(outputId = 'cost')
)
output$cost <- renderText({
my_message <- paste("$", input$price, input$quantity)
return(my_message)
})
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input_list, output_list) {
output$cost <- renderText({
my_message <- paste("$", input$price, input$quantity)
return(my_message)
})
}
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput(inputId = 'price', label = "Price (in dollars)", value = 0, min = 0),
numericInput(inputId = 'quantity', label = "Quantity", value = 1, min = 1),
p(strong("Cost")),
textOutput(outputId = 'cost')
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input_list, output_list) {
output$cost <- renderText({
my_message <- paste("$", input$price, input$quantity)
return(my_message)
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)

# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library("httr")
library("jsonlite")
library("dplyr")
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource))
# Extract the content of the response using the `content()` function, saving it
# in a variable.
response_content <- content(GET(paste0(base_uri, org_resource)), "text")
# Convert the content variable from a JSON string into a data frame.
fromJSON(response_content)
# Convert the content variable from a JSON string into a data frame.
rc_df <- fromJSON(response_content)
# How many (public) repositories does the organization have?
nrow(rc_df)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(first = "dplyr", second = "test")
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories/"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(past0(base_uri, search_endpoint, query_params))
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint, query_params))
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(first = "dplyr")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint, query_params))
# Extract the content of the response and convert it from a JSON string into a
# data frame.
rc_df_2 <- fromJSON(content(GET(paste0(base_uri, search_endpoint, query_params)), "text"))
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
nrow(rc_df_2)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(first = "apple")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint, query_params))
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(first = "programming-for-data-science")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint, query_params))
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories?q="
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(first = "programming-for-data-science")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint, query_params))
# Extract the content of the response and convert it from a JSON string into a
# data frame.
rc_df_2 <- fromJSON(content(GET(paste0(base_uri, search_endpoint, query_params)), "text"))
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
nrow(rc_df_2)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
rc_df_2 <- flatten(rc_df_2)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
is.data.frame(rc_df_2)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint, query_params))
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint), query = query_params)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(first = "programming-for-data-science")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint), query = query_params)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories?q="
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- "programming-for-data-science"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint, query_params))
# Extract the content of the response and convert it from a JSON string into a
# data frame.
rc_df_2 <- fromJSON(content(GET(paste0(base_uri, search_endpoint, query_params)), "text"))
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
is.data.frame(rc_df_2)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories?q="
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(first = "programming-for-data-science")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint, query_params))
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint), query = query_params)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint, query_params))
# Extract the content of the response and convert it from a JSON string into a
# data frame.
rc_df_2 <- fromJSON(content(GET(paste0(base_uri, search_endpoint, query_params)), "text"))
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
is.data.frame(rc_df_2)
str(rc_df_2)
names(rc_df_2)
items <- rc_df_2$items
is.data.frame(items)
nrow(items)
# What are the full names of the top 5 repos in the search results?
top_n(items, 5)
View(items)
# What are the full names of the top 5 repos in the search results?
items %>%
top_n(5) %>%
select(name) %>%
pull(name)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(first = "programming-for-data-science")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint), query = query_params)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories?q="
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(first = "programming-for-data-science")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint, query_params))
# Extract the content of the response and convert it from a JSON string into a
# data frame.
rc_df_2 <- fromJSON(content(GET(paste0(base_uri, search_endpoint, query_params)), "text"))
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "dplyr")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint), query = query_params)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
rc_df_2 <- fromJSON(content(GET(paste0(base_uri, search_endpoint, query_params)), "text"))
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
is.data.frame(rc_df_2)
str(rc_df_2)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "programming-for-data-science")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint), query = query_params)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
rc_df_2 <- fromJSON(content(GET(paste0(base_uri, search_endpoint, query_params)), "text"))
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
is.data.frame(rc_df_2)
str(rc_df_2)
names(rc_df_2)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri, search_endpoint), query = query_params)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
rc_df_2 <- fromJSON(content(GET(paste0(base_uri, search_endpoint), query = query_params), "text"))
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
is.data.frame(rc_df_2)
str(rc_df_2)
names(rc_df_2)
items <- rc_df_2$items
is.data.frame(items)
nrow(items)
# What are the full names of the top 5 repos in the search results?
items %>%
top_n(5) %>%
select(name) %>%
pull(name)

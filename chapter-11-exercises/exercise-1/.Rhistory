# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
install.packages(c("devtools", "fueleconomy"))
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
install.packages(c("devtools", "fueleconomy"))
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
install.packages("devtools")
# Install devtools package: allows installations from GitHub
install.packages("devtools")
install.packages("devtools")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[, make]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
num_manufacturers <- unique(manufacturers)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
num_manufacturers <- length(unique(manufacturers))
# Filter the data set for vehicles manufactured in 1997
manufactured_1997 <- vehicles[vehicles$year == 1997, make]
# Filter the data set for vehicles manufactured in 1997
manufactured_1997 <- vehicles[vehicles$year == 1997, "make"]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
?order
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(manufactured_1997)
View(manufactured_1997)
# Filter the data set for vehicles manufactured in 1997
manufactured_1997 <- vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
manufactured_1997[order(manufactured_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
manufactured_1997["average"] <- (manufactured_1997$hwy + manufactured_1997$cty) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
2w_vehicles <- vehicles[vehicles$drive == "2-Wheel Drive", ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2w <- vehicles[vehicles$drive == "2-Wheel Drive", ]
efficient_2w <- vehicles_2w[vehicles_2w$cty < 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
id_worst <- vehicles[vehicles$hwy == max(vehicles$hwy), id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
id_worst <- vehicles[vehicles$hwy == max(vehicles$hwy), "id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
id_worst <- vehicles[vehicles$hwy == mim(vehicles$hwy), "id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
id_worst <- vehicles[vehicles$hwy == min(vehicles$hwy), "id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
id_worst <- vehicles_2w[vehicles_2w$hwy == min(vehicles_2w$hwy), "id"]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
model <- function(year_choice, make_choice){
choose_cars <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
return(choose_cars[choose_cars$hwy == max(choose_cars$hwy), "model"])
}
# What was the most efficient Honda model of 1995?
efficient_Honda_1995 <- model(1995, "Honda")
install.packages("fueleconomy")
install.packages("fueleconomy")
# Install and load the "dplyr" library
install.packages("dplyr")
library("dplyr")
View(vehicles)
View(vehicle)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
View(vehicles)
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(makes)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
num_makes <- length(distinct(makes))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
num_makes <- distinct(makes)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
num_makes <- length(distinct(makes))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
num_makes <- size(distinct(makes))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
num_makes <- length(distinct(makes))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
num_makes <- sum(distinct(makes))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
num_makes <- nrow(distinct(makes))
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
vehicles_1997 <- filter(vehicles_1997, order(vehicles_1997$hwy))
# Arrange the 1997 cars by highway (`hwy`) gas milage
vehicles_1997 <- arrange(vehicles_1997, order(vehicles_1997$hwy))
# Arrange the 1997 cars by highway (`hwy`) gas milage
vehicles_1997 <- arrange(vehicles_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997 <- mutate(vehicles_1997, average = (hwy + cty) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2w_efficient <- filter(vehicles, drive == "2-Wheel Drive", hwy > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
id_worst <- select(filter(vehicles_2w_efficient, hwy == min(vehicles_2w_efficient$hwy)), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
id_worst <- select(filter(vehicles_2w_efficient, hwy == min(vehicles_2w_efficient$hwy)), hwy)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
id_worst <- select(filter(vehicles_2w_efficient, hwy == min(vehicles_2w_efficient$hwy)), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
id_worst <- select(filter(vehicles_2w_efficient, hwy == min(hwy)), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
id_worst <- select(filter(vehicles_2w_efficient, hwy == min(hwy)), id)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2w_efficient <- filter(vehicles, drive == "2-Wheel Drive", hwy > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2w_efficient <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
id_worst <- select(filter(vehicles_2w_efficient, hwy == min(hwy)), id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
find_model <- function(year_choice, make_choice){
return(select(filter(vehicles, year == year_choice, make == make_choice, hwy == max(hwy)), model))
}
# What was the most efficient Honda model of 1995?
efficient_Honda_1995_model <- find_model(1995, "Honda")
print(efficient_Honda_1995_model)
View(efficient_Honda_1995_model)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
find_model <- function(year_choice, make_choice){
return(select(filter(vehicles, year == year_choice, make == make_choice, hwy == max(hwy)), model))
}
# What was the most efficient Honda model of 1995?
efficient_Honda_1995_model <- find_model(1995, "Honda")
View(efficient_Honda_1995_model)
filter(vehicles, year == year_choice, make == make_choice, hwy == max(hwy)
filter(vehicles, year == year_choice, make == make_choice, hwy == max(hwy)
filter(vehicles, year == year_choice, make == make_choice, hwy == max(hwy))
filter(vehicles, year == 1995, make == "Honda", hwy == max(hwy))
test1 <- filter(vehicles, year == 1995, make == "Honda", hwy == max(hwy))
View(test1)
test1 <- filter(vehicles, year == 1995, make == "Honda", hwy == max(vehicles$hwy))
View(test1)
test1 <- filter(vehicles, year == 1995, make == "Honda")
View(test1)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
find_model <- function(year_choice, make_choice){
choose_vehicles <- filter(vehicles, year == year_choice, make == make_choice)
return(select(filter(choose_vehicles, hwy == max(hwy)), model))
}
# What was the most efficient Honda model of 1995?
efficient_Honda_1995_model <- find_model(1995, "Honda")
View(efficient_Honda_1995_model)
print(efficient_Honda_1995_model)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library("nycflights13")
View(head(flights))
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
nrow(flights)
ncol(flights)
colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, amount = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -amount)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, amount = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -amount)
library("nycflights13")
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights_new <- flights %>%
mutate(flights, amount = arr_delay - dep_delay) %>%
arrange(flights, -amount)
library("nycflights13")
View(head(flights))
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
nrow(flights)
ncol(flights)
colnames(flights)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights_new <- flights %>%
mutate(flights, amount = arr_delay - dep_delay) %>%
arrange(flights, -amount)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights_new <- flights %>%
mutate(amount = arr_delay - dep_delay) %>%
arrange(-amount)
# Make a histogram of the amount of time gained using the `hist()` function
hist(amount)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$amount)
# Make a histogram of the amount of time gained using the `hist()` function
?hist
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$amount)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_new$amount)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average_amount <- summarize(flights_new, average_amount = mean(amount), na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average_amount <- summarize(flights_new, average_amount = mean(amount, na.rm = TRUE))
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -gain_in_air)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights_new <- flights %>%
mutate(gain_in_air = arr_delay - dep_delay) %>%
arrange(-gain_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_new$amount)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights_new$gain_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average_amount <- summarize(flights_new, average_amount = mean(amount, na.rm = TRUE))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average_amount <- summarize(flights_new, average_amount = mean(gain_in_air, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
SEA_flights <- select(filter(flights_new, dest == "SEA"), origin, dest, gain_in_air)
# On average, did flights to SeaTac gain or loose time?
average_amount_SEA <- summarize(SEA_flights, average_amount = mean(gain_in_air, na.rm = TRUE))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
JFK_to_SEA <- SEA_flights %>%
filter(origin == "JFK") %>%
mutate(average = mean(gain_in_air, na.rm = TRUE),
min = min(gain_in_air, na.rm = TRUE),
max = max(gain_in_air, na.rm = TRUE))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
JFK_to_SEA <- SEA_flights %>%
filter(origin == "JFK") %>%
summarize(average = mean(gain_in_air, na.rm = TRUE),
min = min(gain_in_air, na.rm = TRUE),
max = max(gain_in_air, na.rm = TRUE))
